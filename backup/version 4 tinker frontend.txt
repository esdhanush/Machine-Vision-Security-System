import cv2
import face_recognition
import datetime
import json
import os
import threading
import winsound
import smtplib
from PIL import Image, ImageDraw, ImageFont, ImageTk
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import tkinter as tk
from tkinter import filedialog

# Load sample images of known individuals and their names
known_images = [
    ("data/known_person1.jpg", "Dhanush"),
    ("data/known_person7.jpg", "Apoo")
]

FACE_DISTANCE_THRESHOLD = 0.6  # You can adjust this value as needed

known_face_encodings = []
known_face_names = []

UNKNOWN_PERSONS_DIR = "unknown_persons"
if not os.path.exists(UNKNOWN_PERSONS_DIR):
    os.makedirs(UNKNOWN_PERSONS_DIR)

for image_path, name in known_images:
    image = face_recognition.load_image_file(image_path)
    face_encoding = face_recognition.face_encodings(image)[0]
    known_face_encodings.append(face_encoding)
    known_face_names.append(name)

# Directory to store known face images and detected frames
KNOWN_FACES_DIR = "known_faces"

# Dictionary to store detected persons' information
detected_persons = {}

def display_matches(known_matches, unknown_matches):
    if len(known_matches) == 0 and len(unknown_matches) == 0:
        print("No matches found. Searching...")
        return

    print("Known Persons Matches:")
    for name, distance in known_matches:
        print(f"Name: {name}, Face Distance: {distance}")

    print("\nUnknown Persons Matches:")
    if len(unknown_matches) == 0:
        print("No matches found in the 'unknown_persons' folder.")
    else:
        for filename in unknown_matches:
            print(f"File Name: {filename}")

            # Display the matching image
            image_path = os.path.join(UNKNOWN_PERSONS_DIR, filename)
            image = cv2.imread(image_path)
            cv2.imshow(f"Matching Image: {filename}", image)

def save_detected_persons():
    with open('detection_records.json', 'w') as file:
        json.dump(detected_persons, file)

def save_detected_frame(person_name, frame):
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    detected_persons[person_name].append(current_time)

    # Overlay timestamp on the image
    timestamp_text = f"{person_name} - {current_time}"
    cv2.putText(frame, timestamp_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Save entire detected frame as image
    frame_path = f"{KNOWN_FACES_DIR}/{person_name}_{current_time.replace(':', '-')}.jpg"
    cv2.imwrite(frame_path, frame)

def send_email_notification(image_path):
    # Email configuration
    SMTP_SERVER = "smtp.gmail.com"
    SMTP_PORT = 587
    EMAIL_ADDRESS = "shansenthilsesd@gmail.com"
    EMAIL_PASSWORD = "uahcnrwlbnywbthx"
    RECIPIENT_EMAIL = "dhanush.cs21@bitsathy.ac.in"

    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = RECIPIENT_EMAIL
    msg['Subject'] = "Unknown Person Detected"

    text = MIMEText("An unknown person was detected by the security system.")
    msg.attach(text)

    with open(image_path, 'rb') as f:
        img = MIMEImage(f.read())
    img.add_header('Content-Disposition', 'attachment', filename=os.path.basename(image_path))
    msg.attach(img)

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, msg.as_string())
        server.quit()
        print("Email notification sent successfully!")
    except Exception as e:
        print("Error sending email:", e)

# Secure mode flag
secure_mode = False

# Open the camera feed
cap = cv2.VideoCapture(0)

# Create a tkinter window for the frontend page
root = tk.Tk()
root.title("Security System")
root.configure(bg="#000")  # Black background

# Function to toggle secure mode
def toggle_secure_mode():
    global secure_mode
    secure_mode = not secure_mode
    secure_mode_label.config(text="Secure Mode: ON" if secure_mode else "Secure Mode: OFF")

# Function to browse for an unknown person's image
def browse_image():
    file_path = filedialog.askopenfilename()
    if file_path:
        print("Searching...")
        # Load the selected image and analyze it
        unknown_image = face_recognition.load_image_file(file_path)
        unknown_face_encodings = face_recognition.face_encodings(unknown_image)

        if len(unknown_face_encodings) == 0:
            print("No faces found in the selected image.")
            return

        unknown_face_encoding = unknown_face_encodings[0]  # Assuming only one face is in the image

        # Search for matches in known and unknown persons
        matches = []
        for known_face_encoding, known_face_name in zip(known_face_encodings, known_face_names):
            # Compare the unknown face with known faces
            face_distance = face_recognition.face_distance([known_face_encoding], unknown_face_encoding)
            if face_distance < FACE_DISTANCE_THRESHOLD:
                matches.append((known_face_name, face_distance))

        # Search for matches in the "unknown_persons" folder
        unknown_persons_matches = []
        for filename in os.listdir(UNKNOWN_PERSONS_DIR):
            unknown_person_image = face_recognition.load_image_file(os.path.join(UNKNOWN_PERSONS_DIR, filename))
            unknown_person_face_encodings = face_recognition.face_encodings(unknown_person_image)

            for unknown_person_face_encoding in unknown_person_face_encodings:
                face_distance = face_recognition.face_distance([unknown_person_face_encoding], unknown_face_encoding)
                if face_distance < FACE_DISTANCE_THRESHOLD:
                    unknown_persons_matches.append(filename)

        # Display matching images and details
        display_matches(matches, unknown_persons_matches)

# Function to quit the application
def quit_application():
    save_detected_persons()  # Save detected information before quitting
    cap.release()  # Release the camera feed
    cv2.destroyAllWindows()  # Close the display window
    root.quit()

# Secure mode label
secure_mode_label = tk.Label(root, text="Secure Mode: OFF", bg="#000", fg="#0F0")
secure_mode_label.pack(pady=10)

# Buttons
secure_mode_button = tk.Button(root, text="Toggle Secure Mode", command=toggle_secure_mode, bg="#333", fg="#0F0")
browse_image_button = tk.Button(root, text="Browse for Image", command=browse_image, bg="#333", fg="#0F0")
quit_button = tk.Button(root, text="Quit", command=quit_application, bg="#F00", fg="#000")

secure_mode_button.pack(pady=10)
browse_image_button.pack(pady=10)
quit_button.pack(pady=10)

# Create a tkinter label to display the video feed
video_label = tk.Label(root)
video_label.pack()

def update_video_feed():
    ret, frame = cap.read()  # Read a frame from the camera

    if ret:
        # Process the frame for face detection and recognition
        face_locations = face_recognition.face_locations(frame)
        face_encodings = face_recognition.face_encodings(frame, face_locations)

        for face_location, face_encoding in zip(face_locations, face_encodings):
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            name = "Unknown Person"

            for i, match in enumerate(matches):
                if match:
                    name = known_face_names[i]
                    break

            top, right, bottom, left = face_location
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.putText(frame, name, (left, bottom + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 255, 0), 2)

            # Save the entire frame when an unknown person is detected
            if name == "Unknown Person":
                timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                filename = f"unknown_person_{timestamp}.jpg"
                filepath = os.path.join(UNKNOWN_PERSONS_DIR, filename)
                cv2.imwrite(filepath, frame)

            # Secure mode: If an unknown person is detected, play a beep sound and send an email
            if secure_mode and name == "Unknown Person":
                beep_thread = threading.Thread(target=winsound.Beep, args=(1000, 500))
                beep_thread.start()

                # Overlay timestamp on the image
                timestamp_text = f"Unknown Person - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                pil_frame = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                draw = ImageDraw.Draw(pil_frame)
                font = ImageFont.truetype("arial.ttf", 36)
                draw.text((10, 10), timestamp_text, font=font, fill=(255, 0, 0))

                # Save the image with a timestamp overlay
                unknown_image_path = "unknown_person.jpg"
                pil_frame.save(unknown_image_path)

                # Send an email notification with the image
                email_thread = threading.Thread(target=send_email_notification, args=(unknown_image_path,))
                email_thread.start()

            # Save detected person's information and frame
            if name != "Unknown Person":
                if name not in detected_persons:
                    detected_persons[name] = []
                save_detected_frame(name, frame)  # Save the entire detected frame

        # Convert the frame to RGB format and display it in the tkinter label
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        img = ImageTk.PhotoImage(image=img)
        video_label.img = img
        video_label.configure(image=img)

    video_label.after(10, update_video_feed)  # Update the video feed every 10 milliseconds

update_video_feed()  # Start updating the video feed

root.mainloop()  # Start the tkinter main loop
