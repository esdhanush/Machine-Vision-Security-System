face detection
unknown face detection
search(for that date)
seach and give image
secure mode
email alert


import cv2
import face_recognition
import datetime
import json
import os
import threading
import winsound
import smtplib
from PIL import Image, ImageDraw, ImageFont
import pickle
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import base64
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from googleapiclient.discovery import build

# Load sample images of known individuals and their names
known_images = [
    ("known_person1.jpg", "Dhanush"),
    ("known_person2.jpg", "Sanjay"),
    ("known_person3.jpg", "Varma"),
    ("known_person4.jpg", "Shyam"),
    ("known_person5.jpg", "Thamil")
    # Add more known individuals as needed
]

known_face_encodings = []
known_face_names = []

for image_path, name in known_images:
    image = face_recognition.load_image_file(image_path)
    face_encoding = face_recognition.face_encodings(image)[0]
    known_face_encodings.append(face_encoding)
    known_face_names.append(name)

# Directory to store known face images and detected frames
KNOWN_FACES_DIR = "known_faces"

# Dictionary to store detected persons' information
detected_persons = {}


def save_detected_persons():
    with open('detection_records.json', 'w') as file:
        json.dump(detected_persons, file)


def load_detected_persons():
    try:
        with open('detection_records.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def search_person(person_name):
    if person_name in detected_persons:
        detection_times = detected_persons[person_name]
        last_detection_time = detection_times[-1] if detection_times else None

        if last_detection_time:
            image_path = f"{KNOWN_FACES_DIR}/{person_name}_{last_detection_time.replace(':', '-')}.jpg"  # Full image path
            image = cv2.imread(image_path)
            if image is not None:
                cv2.imshow(f"{person_name} - Last Detection", image)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
                print(f"{person_name} was last detected at {last_detection_time}")
            else:
                print(f"Image not found for {person_name} at {last_detection_time}")
        else:
            print(f"No detection records found for {person_name}")
    else:
        print(f"No detection records found for {person_name}")


def save_detected_frame(person_name, frame):
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    detected_persons[person_name].append(current_time)

    # Overlay timestamp on the image
    timestamp_text = f"{person_name} - {current_time}"
    cv2.putText(frame, timestamp_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Save entire detected frame as image
    frame_path = f"{KNOWN_FACES_DIR}/{person_name}_{current_time.replace(':', '-')}.jpg"
    cv2.imwrite(frame_path, frame)


def send_email_notification(image_path):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = RECIPIENT_EMAIL
    msg['Subject'] = "Unknown Person Detected"

    text = MIMEText("An unknown person was detected by the security system.")
    msg.attach(text)

    with open(image_path, 'rb') as f:
        img = MIMEImage(f.read())
    img.add_header('Content-Disposition', 'attachment', filename=os.path.basename(image_path))
    msg.attach(img)

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, msg.as_string())
        server.quit()
        print("Email notification sent successfully!")
    except Exception as e:
        print("Error sending email:", e)


def load_known_faces():
    if not os.path.exists(KNOWN_FACES_DIR):
        os.makedirs(KNOWN_FACES_DIR)

    for image_path, name in known_images:
        known_face_path = f"{KNOWN_FACES_DIR}/{name}.jpg"
        if not os.path.exists(known_face_path):
            image = face_recognition.load_image_file(image_path)
            cv2.imwrite(known_face_path, image)

# Add the necessary scope for Gmail API
SCOPES = ['https://www.googleapis.com/auth/gmail.send']

# Function to create an email message
def create_email_message(sender, to, subject, message_text):
    message = MIMEText(message_text)
    message['to'] = to
    message['from'] = sender
    message['subject'] = subject
    raw_message = base64.urlsafe_b64encode(message.as_bytes())
    raw_message = raw_message.decode("utf-8")
    return {'raw': raw_message}

# Function to add an image attachment to the email message
def add_image_attachment(message, image_path):
    with open(image_path, 'rb') as img_file:
        img_data = img_file.read()
    img_data_base64 = base64.urlsafe_b64encode(img_data).decode("utf-8")
    message.attach(MIMEImage(img_data_base64))
    return message

# Function to send a message using Gmail API
def send_message(service, user_id, message):
    try:
        message = (service.users().messages().send(userId=user_id, body=message).execute())
        print('Message Id: %s' % message['id'])
        return message
    except Exception as e:
        print('An error occurred: %s' % e)
        return None

# Secure mode flag
secure_mode = False

# Email configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_ADDRESS = "shansenthilsesd@gmail.com"
EMAIL_PASSWORD = "uahcnrwlbnywbthx"
RECIPIENT_EMAIL = "dhanush.cs21@bitsathy.ac.in"

# Open the camera feed
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()  # Read a frame from the camera

    if not ret:
        break

    # Process the frame for face detection and recognition
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    for face_encoding in face_encodings:
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown Person"

        for i, match in enumerate(matches):
            if match:
                name = known_face_names[i]
                break

        for (top, right, bottom, left) in face_locations:
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 255, 0), 2)

            # Secure mode: If unknown person is detected, play beep sound and send email
            if secure_mode and name == "Unknown Person":
                beep_thread = threading.Thread(target=winsound.Beep, args=(1000, 500))
                beep_thread.start()

                # Overlay timestamp on the image
                timestamp_text = f"Unknown Person - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                pil_frame = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                draw = ImageDraw.Draw(pil_frame)
                font = ImageFont.truetype("arial.ttf", 36)
                draw.text((10, 10), timestamp_text, font=font, fill=(255, 0, 0))

                # Save the image with timestamp overlay
                unknown_image_path = "unknown_person.jpg"
                pil_frame.save(unknown_image_path)

                # Send email notification with image
                email_thread = threading.Thread(target=send_email_notification, args=(unknown_image_path,))
                email_thread.start()

            # Save detected person's information and frame
            if name != "Unknown Person":
                if name not in detected_persons:
                    detected_persons[name] = []
                save_detected_frame(name, frame)  # Save the entire detected frame

    cv2.imshow('Face Recognition', frame)  # Display the frame

    # Search functionality
    key = cv2.waitKey(1) & 0xFF
    if key == ord('s'):
        person_name = input("Enter person's name: ")
        search_person(person_name)

    if key == ord('t'):  # Turn on secure mode
        secure_mode = True
        print("Secure mode ON")

    if key == ord('f'):  # Turn off secure mode
        secure_mode = False
        print("Secure mode OFF")

    if key == ord('q'):  # Exit loop when 'q' is pressed
        save_detected_persons()  # Save detected information before quitting
        break

cap.release()  # Release the camera feed
cv2.destroyAllWindows()  # Close the display window
